name: CI - Python

on:
  push:
    branches: 
      - '**'
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build-cache:
    runs-on: ubuntu-latest
    strategy:
      matrix:
         python-version: ["3.12"]
         
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up uv and Python
        uses: astral-sh/setup-uv@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache uv
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-${{ matrix.python-version }}-${{ hashFiles('uv.lock', 'pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-${{ matrix.python-version }}-
          
      - name: Install dependencies
        run: uv sync --dev

      # - name: Lint with flake8
      #   run: |
      #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  test:
    name: ðŸ§ª Run Test
    runs-on: ubuntu-latest
    needs: build-cache
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up uv and Python
        uses: astral-sh/setup-uv@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-${{ matrix.python-version }}-${{ hashFiles('uv.lock', 'pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-${{ matrix.python-version }}-

      - name: Install dependencies
        run: uv sync --dev

      - name: Run tests with pytest
        run: uv run pytest -v
        # Optional coverage:
        # run: uv run pytest -v --cov=kyc_pipeline --cov-report=term-missing

  promptfoo:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Create .env for Promptfoo
        run: |
          cat > .env << 'EOF'
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY_PROMPTFOO }}
          EOF

      - name: Run Promptfoo (verbose, no cache)
        run: |
          # Write results to JSON + HTML; also keep console output
          npx promptfoo@latest eval \
            -c ./promptfooconfig.yaml \
            --env-path .env \
            --no-cache \
            --verbose \
            --no-share \
            --no-progress-bar \
            -o promptfoo-results.json \
            -o promptfoo-results.html | tee promptfoo-console.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: promptfoo-artifacts
          path: |
            promptfoo-results.xml
            promptfoo-summary.md
            .promptfoo/**

      - name: Publish test summary
        if: always()
        run: |
          if [ -f promptfoo-summary.md ]; then
            echo "## Promptfoo Summary" >> $GITHUB_STEP_SUMMARY
            cat promptfoo-summary.md >> $GITHUB_STEP_SUMMARY
          fi